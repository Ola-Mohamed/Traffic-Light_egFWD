
trifficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d36  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000daa  2**0
                  ALLOC
  2 .stab         00001db8  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001303  00000000  00000000  00002b64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8e 06 	call	0xd1c	; 0xd1c <main>
  74:	0c 94 99 06 	jmp	0xd32	; 0xd32 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer0_Delay>:
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/

void Timer0_Delay(uint32 Time_delay)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	6d 83       	std	Y+5, r22	; 0x05
  92:	7e 83       	std	Y+6, r23	; 0x06
  94:	8f 83       	std	Y+7, r24	; 0x07
  96:	98 87       	std	Y+8, r25	; 0x08
	TCNT0 = 6; //Set Timer0 initial value to 6
  98:	e2 e5       	ldi	r30, 0x52	; 82
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	80 83       	st	Z, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1*/

	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
  a0:	e3 e5       	ldi	r30, 0x53	; 83
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	85 e8       	ldi	r24, 0x85	; 133
  a6:	80 83       	st	Z, r24

     for(uint32 i=0 ;i< Time_delay ;i++){
  a8:	19 82       	std	Y+1, r1	; 0x01
  aa:	1a 82       	std	Y+2, r1	; 0x02
  ac:	1b 82       	std	Y+3, r1	; 0x03
  ae:	1c 82       	std	Y+4, r1	; 0x04
  b0:	1b c0       	rjmp	.+54     	; 0xe8 <Timer0_Delay+0x6c>

	   while(!(TIFR & (1<<TOV0))); // Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)
  b2:	e8 e5       	ldi	r30, 0x58	; 88
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 2f       	mov	r24, r24
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	81 70       	andi	r24, 0x01	; 1
  be:	90 70       	andi	r25, 0x00	; 0
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	b9 f3       	breq	.-18     	; 0xb2 <Timer0_Delay+0x36>
	   TIFR |= (1<<TOV0); // Clear TOV0 bit by set its value
  c4:	a8 e5       	ldi	r26, 0x58	; 88
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e8 e5       	ldi	r30, 0x58	; 88
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	8c 93       	st	X, r24
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1*/

	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);

     for(uint32 i=0 ;i< Time_delay ;i++){
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	9a 81       	ldd	r25, Y+2	; 0x02
  d6:	ab 81       	ldd	r26, Y+3	; 0x03
  d8:	bc 81       	ldd	r27, Y+4	; 0x04
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	a1 1d       	adc	r26, r1
  de:	b1 1d       	adc	r27, r1
  e0:	89 83       	std	Y+1, r24	; 0x01
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	ab 83       	std	Y+3, r26	; 0x03
  e6:	bc 83       	std	Y+4, r27	; 0x04
  e8:	29 81       	ldd	r18, Y+1	; 0x01
  ea:	3a 81       	ldd	r19, Y+2	; 0x02
  ec:	4b 81       	ldd	r20, Y+3	; 0x03
  ee:	5c 81       	ldd	r21, Y+4	; 0x04
  f0:	8d 81       	ldd	r24, Y+5	; 0x05
  f2:	9e 81       	ldd	r25, Y+6	; 0x06
  f4:	af 81       	ldd	r26, Y+7	; 0x07
  f6:	b8 85       	ldd	r27, Y+8	; 0x08
  f8:	28 17       	cp	r18, r24
  fa:	39 07       	cpc	r19, r25
  fc:	4a 07       	cpc	r20, r26
  fe:	5b 07       	cpc	r21, r27
 100:	c0 f2       	brcs	.-80     	; 0xb2 <Timer0_Delay+0x36>
	   while(!(TIFR & (1<<TOV0))); // Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)
	   TIFR |= (1<<TOV0); // Clear TOV0 bit by set its value

     }

	TCCR0 = 0; // Stop Timer0 by clear the Clock bits (CS00, CS01 and CS02)
 102:	e3 e5       	ldi	r30, 0x53	; 83
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	10 82       	st	Z, r1
}
 108:	28 96       	adiw	r28, 0x08	; 8
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	08 95       	ret

0000011a <Exi0Init>:

/*******************************************************************************
 *                      Functions                                              *
 *******************************************************************************/
void Exi0Init()
{
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= (~(1<<PD2));                // Configure INT0/PD2 as input pin
 122:	a1 e3       	ldi	r26, 0x31	; 49
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e1 e3       	ldi	r30, 0x31	; 49
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	8c 93       	st	X, r24
	PORTD |= (1<<PD2);					 //enabling Pull-up for the pin
 130:	a2 e3       	ldi	r26, 0x32	; 50
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e2 e3       	ldi	r30, 0x32	; 50
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	84 60       	ori	r24, 0x04	; 4
 13c:	8c 93       	st	X, r24
	GICR  |= (1<<INT0);                  // Enable external interrupt pin INT0
 13e:	ab e5       	ldi	r26, 0x5B	; 91
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	eb e5       	ldi	r30, 0x5B	; 91
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC01);  				 // Trigger INT0 with the falling edge
 14c:	a5 e5       	ldi	r26, 0x55	; 85
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e5 e5       	ldi	r30, 0x55	; 85
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	82 60       	ori	r24, 0x02	; 2
 158:	8c 93       	st	X, r24
	GIFR   = (1<<INTF0);				 // Disabling INT0 flag manually to avoid any errors
 15a:	ea e5       	ldi	r30, 0x5A	; 90
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 e4       	ldi	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
}
 162:	cf 91       	pop	r28
 164:	df 91       	pop	r29
 166:	08 95       	ret

00000168 <Exi0Enable>:

// function to enable global interrupt
void Exi0Enable (void)
{
 168:	df 93       	push	r29
 16a:	cf 93       	push	r28
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 170:	af e5       	ldi	r26, 0x5F	; 95
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	ef e5       	ldi	r30, 0x5F	; 95
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	8c 93       	st	X, r24
}
 17e:	cf 91       	pop	r28
 180:	df 91       	pop	r29
 182:	08 95       	ret

00000184 <Exi0Disable>:

// function to disable global interrupt

void Exi0Disable (void)
{
 184:	df 93       	push	r29
 186:	cf 93       	push	r28
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,7);
 18c:	af e5       	ldi	r26, 0x5F	; 95
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	ef e5       	ldi	r30, 0x5F	; 95
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 77       	andi	r24, 0x7F	; 127
 198:	8c 93       	st	X, r24
}
 19a:	cf 91       	pop	r28
 19c:	df 91       	pop	r29
 19e:	08 95       	ret

000001a0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
 1a0:	df 93       	push	r29
 1a2:	cf 93       	push	r28
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <GPIO_setupPinDirection+0x6>
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <GPIO_setupPinDirection+0x8>
 1a8:	0f 92       	push	r0
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	89 83       	std	Y+1, r24	; 0x01
 1b0:	6a 83       	std	Y+2, r22	; 0x02
 1b2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	88 30       	cpi	r24, 0x08	; 8
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <GPIO_setupPinDirection+0x1c>
 1ba:	d5 c0       	rjmp	.+426    	; 0x366 <GPIO_setupPinDirection+0x1c6>
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	84 30       	cpi	r24, 0x04	; 4
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <GPIO_setupPinDirection+0x24>
 1c2:	d1 c0       	rjmp	.+418    	; 0x366 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	3d 83       	std	Y+5, r19	; 0x05
 1cc:	2c 83       	std	Y+4, r18	; 0x04
 1ce:	8c 81       	ldd	r24, Y+4	; 0x04
 1d0:	9d 81       	ldd	r25, Y+5	; 0x05
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	91 05       	cpc	r25, r1
 1d6:	09 f4       	brne	.+2      	; 0x1da <GPIO_setupPinDirection+0x3a>
 1d8:	43 c0       	rjmp	.+134    	; 0x260 <GPIO_setupPinDirection+0xc0>
 1da:	2c 81       	ldd	r18, Y+4	; 0x04
 1dc:	3d 81       	ldd	r19, Y+5	; 0x05
 1de:	22 30       	cpi	r18, 0x02	; 2
 1e0:	31 05       	cpc	r19, r1
 1e2:	2c f4       	brge	.+10     	; 0x1ee <GPIO_setupPinDirection+0x4e>
 1e4:	8c 81       	ldd	r24, Y+4	; 0x04
 1e6:	9d 81       	ldd	r25, Y+5	; 0x05
 1e8:	00 97       	sbiw	r24, 0x00	; 0
 1ea:	71 f0       	breq	.+28     	; 0x208 <GPIO_setupPinDirection+0x68>
 1ec:	bc c0       	rjmp	.+376    	; 0x366 <GPIO_setupPinDirection+0x1c6>
 1ee:	2c 81       	ldd	r18, Y+4	; 0x04
 1f0:	3d 81       	ldd	r19, Y+5	; 0x05
 1f2:	22 30       	cpi	r18, 0x02	; 2
 1f4:	31 05       	cpc	r19, r1
 1f6:	09 f4       	brne	.+2      	; 0x1fa <GPIO_setupPinDirection+0x5a>
 1f8:	5f c0       	rjmp	.+190    	; 0x2b8 <GPIO_setupPinDirection+0x118>
 1fa:	8c 81       	ldd	r24, Y+4	; 0x04
 1fc:	9d 81       	ldd	r25, Y+5	; 0x05
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	91 05       	cpc	r25, r1
 202:	09 f4       	brne	.+2      	; 0x206 <GPIO_setupPinDirection+0x66>
 204:	85 c0       	rjmp	.+266    	; 0x310 <GPIO_setupPinDirection+0x170>
 206:	af c0       	rjmp	.+350    	; 0x366 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	a1 f4       	brne	.+40     	; 0x236 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 20e:	aa e3       	ldi	r26, 0x3A	; 58
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	ea e3       	ldi	r30, 0x3A	; 58
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	48 2f       	mov	r20, r24
 21a:	8a 81       	ldd	r24, Y+2	; 0x02
 21c:	28 2f       	mov	r18, r24
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 2e       	mov	r0, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <GPIO_setupPinDirection+0x8c>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <GPIO_setupPinDirection+0x88>
 230:	84 2b       	or	r24, r20
 232:	8c 93       	st	X, r24
 234:	98 c0       	rjmp	.+304    	; 0x366 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 236:	aa e3       	ldi	r26, 0x3A	; 58
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	ea e3       	ldi	r30, 0x3A	; 58
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	48 2f       	mov	r20, r24
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	28 2f       	mov	r18, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 2e       	mov	r0, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <GPIO_setupPinDirection+0xb4>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <GPIO_setupPinDirection+0xb0>
 258:	80 95       	com	r24
 25a:	84 23       	and	r24, r20
 25c:	8c 93       	st	X, r24
 25e:	83 c0       	rjmp	.+262    	; 0x366 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	a1 f4       	brne	.+40     	; 0x28e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 266:	a7 e3       	ldi	r26, 0x37	; 55
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	e7 e3       	ldi	r30, 0x37	; 55
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	48 2f       	mov	r20, r24
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	28 2f       	mov	r18, r24
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 2e       	mov	r0, r18
 27e:	02 c0       	rjmp	.+4      	; 0x284 <GPIO_setupPinDirection+0xe4>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <GPIO_setupPinDirection+0xe0>
 288:	84 2b       	or	r24, r20
 28a:	8c 93       	st	X, r24
 28c:	6c c0       	rjmp	.+216    	; 0x366 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 28e:	a7 e3       	ldi	r26, 0x37	; 55
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	e7 e3       	ldi	r30, 0x37	; 55
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	48 2f       	mov	r20, r24
 29a:	8a 81       	ldd	r24, Y+2	; 0x02
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 2e       	mov	r0, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <GPIO_setupPinDirection+0x10c>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <GPIO_setupPinDirection+0x108>
 2b0:	80 95       	com	r24
 2b2:	84 23       	and	r24, r20
 2b4:	8c 93       	st	X, r24
 2b6:	57 c0       	rjmp	.+174    	; 0x366 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	a1 f4       	brne	.+40     	; 0x2e6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 2be:	a4 e3       	ldi	r26, 0x34	; 52
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	e4 e3       	ldi	r30, 0x34	; 52
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <GPIO_setupPinDirection+0x13c>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <GPIO_setupPinDirection+0x138>
 2e0:	84 2b       	or	r24, r20
 2e2:	8c 93       	st	X, r24
 2e4:	40 c0       	rjmp	.+128    	; 0x366 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 2e6:	a4 e3       	ldi	r26, 0x34	; 52
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e4 e3       	ldi	r30, 0x34	; 52
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <GPIO_setupPinDirection+0x164>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <GPIO_setupPinDirection+0x160>
 308:	80 95       	com	r24
 30a:	84 23       	and	r24, r20
 30c:	8c 93       	st	X, r24
 30e:	2b c0       	rjmp	.+86     	; 0x366 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	a1 f4       	brne	.+40     	; 0x33e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 316:	a1 e3       	ldi	r26, 0x31	; 49
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e1 e3       	ldi	r30, 0x31	; 49
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	48 2f       	mov	r20, r24
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	28 2f       	mov	r18, r24
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 2e       	mov	r0, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <GPIO_setupPinDirection+0x194>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <GPIO_setupPinDirection+0x190>
 338:	84 2b       	or	r24, r20
 33a:	8c 93       	st	X, r24
 33c:	14 c0       	rjmp	.+40     	; 0x366 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 33e:	a1 e3       	ldi	r26, 0x31	; 49
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e1 e3       	ldi	r30, 0x31	; 49
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	48 2f       	mov	r20, r24
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	28 2f       	mov	r18, r24
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 2e       	mov	r0, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <GPIO_setupPinDirection+0x1bc>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <GPIO_setupPinDirection+0x1b8>
 360:	80 95       	com	r24
 362:	84 23       	and	r24, r20
 364:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	cf 91       	pop	r28
 372:	df 91       	pop	r29
 374:	08 95       	ret

00000376 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 376:	df 93       	push	r29
 378:	cf 93       	push	r28
 37a:	00 d0       	rcall	.+0      	; 0x37c <GPIO_writePin+0x6>
 37c:	00 d0       	rcall	.+0      	; 0x37e <GPIO_writePin+0x8>
 37e:	0f 92       	push	r0
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	89 83       	std	Y+1, r24	; 0x01
 386:	6a 83       	std	Y+2, r22	; 0x02
 388:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	88 30       	cpi	r24, 0x08	; 8
 38e:	08 f0       	brcs	.+2      	; 0x392 <GPIO_writePin+0x1c>
 390:	d5 c0       	rjmp	.+426    	; 0x53c <__stack+0xdd>
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	84 30       	cpi	r24, 0x04	; 4
 396:	08 f0       	brcs	.+2      	; 0x39a <GPIO_writePin+0x24>
 398:	d1 c0       	rjmp	.+418    	; 0x53c <__stack+0xdd>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	28 2f       	mov	r18, r24
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	3d 83       	std	Y+5, r19	; 0x05
 3a2:	2c 83       	std	Y+4, r18	; 0x04
 3a4:	8c 81       	ldd	r24, Y+4	; 0x04
 3a6:	9d 81       	ldd	r25, Y+5	; 0x05
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	91 05       	cpc	r25, r1
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <GPIO_writePin+0x3a>
 3ae:	43 c0       	rjmp	.+134    	; 0x436 <GPIO_writePin+0xc0>
 3b0:	2c 81       	ldd	r18, Y+4	; 0x04
 3b2:	3d 81       	ldd	r19, Y+5	; 0x05
 3b4:	22 30       	cpi	r18, 0x02	; 2
 3b6:	31 05       	cpc	r19, r1
 3b8:	2c f4       	brge	.+10     	; 0x3c4 <GPIO_writePin+0x4e>
 3ba:	8c 81       	ldd	r24, Y+4	; 0x04
 3bc:	9d 81       	ldd	r25, Y+5	; 0x05
 3be:	00 97       	sbiw	r24, 0x00	; 0
 3c0:	71 f0       	breq	.+28     	; 0x3de <GPIO_writePin+0x68>
 3c2:	bc c0       	rjmp	.+376    	; 0x53c <__stack+0xdd>
 3c4:	2c 81       	ldd	r18, Y+4	; 0x04
 3c6:	3d 81       	ldd	r19, Y+5	; 0x05
 3c8:	22 30       	cpi	r18, 0x02	; 2
 3ca:	31 05       	cpc	r19, r1
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <GPIO_writePin+0x5a>
 3ce:	5f c0       	rjmp	.+190    	; 0x48e <__stack+0x2f>
 3d0:	8c 81       	ldd	r24, Y+4	; 0x04
 3d2:	9d 81       	ldd	r25, Y+5	; 0x05
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	91 05       	cpc	r25, r1
 3d8:	09 f4       	brne	.+2      	; 0x3dc <GPIO_writePin+0x66>
 3da:	85 c0       	rjmp	.+266    	; 0x4e6 <__stack+0x87>
 3dc:	af c0       	rjmp	.+350    	; 0x53c <__stack+0xdd>
		{
		case PORTA_ID:
			if(value == HIGH)
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	a1 f4       	brne	.+40     	; 0x40c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 3e4:	ab e3       	ldi	r26, 0x3B	; 59
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	eb e3       	ldi	r30, 0x3B	; 59
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	48 2f       	mov	r20, r24
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 2e       	mov	r0, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <GPIO_writePin+0x8c>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <GPIO_writePin+0x88>
 406:	84 2b       	or	r24, r20
 408:	8c 93       	st	X, r24
 40a:	98 c0       	rjmp	.+304    	; 0x53c <__stack+0xdd>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 40c:	ab e3       	ldi	r26, 0x3B	; 59
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	eb e3       	ldi	r30, 0x3B	; 59
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 2e       	mov	r0, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <GPIO_writePin+0xb4>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	0a 94       	dec	r0
 42c:	e2 f7       	brpl	.-8      	; 0x426 <GPIO_writePin+0xb0>
 42e:	80 95       	com	r24
 430:	84 23       	and	r24, r20
 432:	8c 93       	st	X, r24
 434:	83 c0       	rjmp	.+262    	; 0x53c <__stack+0xdd>
			}
			break;

		case PORTB_ID:
			if(value == HIGH)
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	a1 f4       	brne	.+40     	; 0x464 <__stack+0x5>
			{
				SET_BIT(PORTB,pin_num);
 43c:	a8 e3       	ldi	r26, 0x38	; 56
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e8 e3       	ldi	r30, 0x38	; 56
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	48 2f       	mov	r20, r24
 448:	8a 81       	ldd	r24, Y+2	; 0x02
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 2e       	mov	r0, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <GPIO_writePin+0xe4>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	0a 94       	dec	r0
 45c:	e2 f7       	brpl	.-8      	; 0x456 <GPIO_writePin+0xe0>
 45e:	84 2b       	or	r24, r20
 460:	8c 93       	st	X, r24
 462:	6c c0       	rjmp	.+216    	; 0x53c <__stack+0xdd>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 464:	a8 e3       	ldi	r26, 0x38	; 56
 466:	b0 e0       	ldi	r27, 0x00	; 0
 468:	e8 e3       	ldi	r30, 0x38	; 56
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	48 2f       	mov	r20, r24
 470:	8a 81       	ldd	r24, Y+2	; 0x02
 472:	28 2f       	mov	r18, r24
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 2e       	mov	r0, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__stack+0x23>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <__stack+0x1f>
 486:	80 95       	com	r24
 488:	84 23       	and	r24, r20
 48a:	8c 93       	st	X, r24
 48c:	57 c0       	rjmp	.+174    	; 0x53c <__stack+0xdd>
			}
			break;
		case PORTC_ID:
			if(value == HIGH)
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	a1 f4       	brne	.+40     	; 0x4bc <__stack+0x5d>
			{
				SET_BIT(PORTC,pin_num);
 494:	a5 e3       	ldi	r26, 0x35	; 53
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e5 e3       	ldi	r30, 0x35	; 53
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 2e       	mov	r0, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__stack+0x53>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__stack+0x4f>
 4b6:	84 2b       	or	r24, r20
 4b8:	8c 93       	st	X, r24
 4ba:	40 c0       	rjmp	.+128    	; 0x53c <__stack+0xdd>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 4bc:	a5 e3       	ldi	r26, 0x35	; 53
 4be:	b0 e0       	ldi	r27, 0x00	; 0
 4c0:	e5 e3       	ldi	r30, 0x35	; 53
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	48 2f       	mov	r20, r24
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 2e       	mov	r0, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__stack+0x7b>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__stack+0x77>
 4de:	80 95       	com	r24
 4e0:	84 23       	and	r24, r20
 4e2:	8c 93       	st	X, r24
 4e4:	2b c0       	rjmp	.+86     	; 0x53c <__stack+0xdd>
			}
			break;
		case PORTD_ID:
			if(value == HIGH)
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	a1 f4       	brne	.+40     	; 0x514 <__stack+0xb5>
			{
				SET_BIT(PORTD,pin_num);
 4ec:	a2 e3       	ldi	r26, 0x32	; 50
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	e2 e3       	ldi	r30, 0x32	; 50
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	48 2f       	mov	r20, r24
 4f8:	8a 81       	ldd	r24, Y+2	; 0x02
 4fa:	28 2f       	mov	r18, r24
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 2e       	mov	r0, r18
 504:	02 c0       	rjmp	.+4      	; 0x50a <__stack+0xab>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	0a 94       	dec	r0
 50c:	e2 f7       	brpl	.-8      	; 0x506 <__stack+0xa7>
 50e:	84 2b       	or	r24, r20
 510:	8c 93       	st	X, r24
 512:	14 c0       	rjmp	.+40     	; 0x53c <__stack+0xdd>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 514:	a2 e3       	ldi	r26, 0x32	; 50
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	e2 e3       	ldi	r30, 0x32	; 50
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	80 81       	ld	r24, Z
 51e:	48 2f       	mov	r20, r24
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	28 2f       	mov	r18, r24
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 2e       	mov	r0, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <__stack+0xd3>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <__stack+0xcf>
 536:	80 95       	com	r24
 538:	84 23       	and	r24, r20
 53a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 53c:	0f 90       	pop	r0
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	cf 91       	pop	r28
 548:	df 91       	pop	r29
 54a:	08 95       	ret

0000054c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 54c:	df 93       	push	r29
 54e:	cf 93       	push	r28
 550:	00 d0       	rcall	.+0      	; 0x552 <GPIO_readPin+0x6>
 552:	00 d0       	rcall	.+0      	; 0x554 <GPIO_readPin+0x8>
 554:	0f 92       	push	r0
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	8a 83       	std	Y+2, r24	; 0x02
 55c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOW;
 55e:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 560:	8b 81       	ldd	r24, Y+3	; 0x03
 562:	88 30       	cpi	r24, 0x08	; 8
 564:	08 f0       	brcs	.+2      	; 0x568 <GPIO_readPin+0x1c>
 566:	84 c0       	rjmp	.+264    	; 0x670 <GPIO_readPin+0x124>
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	84 30       	cpi	r24, 0x04	; 4
 56c:	08 f0       	brcs	.+2      	; 0x570 <GPIO_readPin+0x24>
 56e:	80 c0       	rjmp	.+256    	; 0x670 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 570:	8a 81       	ldd	r24, Y+2	; 0x02
 572:	28 2f       	mov	r18, r24
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	3d 83       	std	Y+5, r19	; 0x05
 578:	2c 83       	std	Y+4, r18	; 0x04
 57a:	4c 81       	ldd	r20, Y+4	; 0x04
 57c:	5d 81       	ldd	r21, Y+5	; 0x05
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	51 05       	cpc	r21, r1
 582:	79 f1       	breq	.+94     	; 0x5e2 <GPIO_readPin+0x96>
 584:	8c 81       	ldd	r24, Y+4	; 0x04
 586:	9d 81       	ldd	r25, Y+5	; 0x05
 588:	82 30       	cpi	r24, 0x02	; 2
 58a:	91 05       	cpc	r25, r1
 58c:	34 f4       	brge	.+12     	; 0x59a <GPIO_readPin+0x4e>
 58e:	2c 81       	ldd	r18, Y+4	; 0x04
 590:	3d 81       	ldd	r19, Y+5	; 0x05
 592:	21 15       	cp	r18, r1
 594:	31 05       	cpc	r19, r1
 596:	69 f0       	breq	.+26     	; 0x5b2 <GPIO_readPin+0x66>
 598:	6b c0       	rjmp	.+214    	; 0x670 <GPIO_readPin+0x124>
 59a:	4c 81       	ldd	r20, Y+4	; 0x04
 59c:	5d 81       	ldd	r21, Y+5	; 0x05
 59e:	42 30       	cpi	r20, 0x02	; 2
 5a0:	51 05       	cpc	r21, r1
 5a2:	b9 f1       	breq	.+110    	; 0x612 <GPIO_readPin+0xc6>
 5a4:	8c 81       	ldd	r24, Y+4	; 0x04
 5a6:	9d 81       	ldd	r25, Y+5	; 0x05
 5a8:	83 30       	cpi	r24, 0x03	; 3
 5aa:	91 05       	cpc	r25, r1
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <GPIO_readPin+0x64>
 5ae:	49 c0       	rjmp	.+146    	; 0x642 <GPIO_readPin+0xf6>
 5b0:	5f c0       	rjmp	.+190    	; 0x670 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 5b2:	e9 e3       	ldi	r30, 0x39	; 57
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	28 2f       	mov	r18, r24
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	8b 81       	ldd	r24, Y+3	; 0x03
 5be:	88 2f       	mov	r24, r24
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	a9 01       	movw	r20, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <GPIO_readPin+0x7e>
 5c6:	55 95       	asr	r21
 5c8:	47 95       	ror	r20
 5ca:	8a 95       	dec	r24
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <GPIO_readPin+0x7a>
 5ce:	ca 01       	movw	r24, r20
 5d0:	81 70       	andi	r24, 0x01	; 1
 5d2:	90 70       	andi	r25, 0x00	; 0
 5d4:	88 23       	and	r24, r24
 5d6:	19 f0       	breq	.+6      	; 0x5de <GPIO_readPin+0x92>
			{
				pin_value = HIGH;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	89 83       	std	Y+1, r24	; 0x01
 5dc:	49 c0       	rjmp	.+146    	; 0x670 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOW;
 5de:	19 82       	std	Y+1, r1	; 0x01
 5e0:	47 c0       	rjmp	.+142    	; 0x670 <GPIO_readPin+0x124>
			}
			break;

		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 5e2:	e6 e3       	ldi	r30, 0x36	; 54
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	28 2f       	mov	r18, r24
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	88 2f       	mov	r24, r24
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	a9 01       	movw	r20, r18
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <GPIO_readPin+0xae>
 5f6:	55 95       	asr	r21
 5f8:	47 95       	ror	r20
 5fa:	8a 95       	dec	r24
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <GPIO_readPin+0xaa>
 5fe:	ca 01       	movw	r24, r20
 600:	81 70       	andi	r24, 0x01	; 1
 602:	90 70       	andi	r25, 0x00	; 0
 604:	88 23       	and	r24, r24
 606:	19 f0       	breq	.+6      	; 0x60e <GPIO_readPin+0xc2>
			{
				pin_value = HIGH;
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	89 83       	std	Y+1, r24	; 0x01
 60c:	31 c0       	rjmp	.+98     	; 0x670 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOW;
 60e:	19 82       	std	Y+1, r1	; 0x01
 610:	2f c0       	rjmp	.+94     	; 0x670 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 612:	e3 e3       	ldi	r30, 0x33	; 51
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	8b 81       	ldd	r24, Y+3	; 0x03
 61e:	88 2f       	mov	r24, r24
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	a9 01       	movw	r20, r18
 624:	02 c0       	rjmp	.+4      	; 0x62a <GPIO_readPin+0xde>
 626:	55 95       	asr	r21
 628:	47 95       	ror	r20
 62a:	8a 95       	dec	r24
 62c:	e2 f7       	brpl	.-8      	; 0x626 <GPIO_readPin+0xda>
 62e:	ca 01       	movw	r24, r20
 630:	81 70       	andi	r24, 0x01	; 1
 632:	90 70       	andi	r25, 0x00	; 0
 634:	88 23       	and	r24, r24
 636:	19 f0       	breq	.+6      	; 0x63e <GPIO_readPin+0xf2>
			{
				pin_value = HIGH;
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	89 83       	std	Y+1, r24	; 0x01
 63c:	19 c0       	rjmp	.+50     	; 0x670 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOW;
 63e:	19 82       	std	Y+1, r1	; 0x01
 640:	17 c0       	rjmp	.+46     	; 0x670 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 642:	e0 e3       	ldi	r30, 0x30	; 48
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	8b 81       	ldd	r24, Y+3	; 0x03
 64e:	88 2f       	mov	r24, r24
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	a9 01       	movw	r20, r18
 654:	02 c0       	rjmp	.+4      	; 0x65a <GPIO_readPin+0x10e>
 656:	55 95       	asr	r21
 658:	47 95       	ror	r20
 65a:	8a 95       	dec	r24
 65c:	e2 f7       	brpl	.-8      	; 0x656 <GPIO_readPin+0x10a>
 65e:	ca 01       	movw	r24, r20
 660:	81 70       	andi	r24, 0x01	; 1
 662:	90 70       	andi	r25, 0x00	; 0
 664:	88 23       	and	r24, r24
 666:	19 f0       	breq	.+6      	; 0x66e <GPIO_readPin+0x122>
			{
				pin_value = HIGH;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	89 83       	std	Y+1, r24	; 0x01
 66c:	01 c0       	rjmp	.+2      	; 0x670 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOW;
 66e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
 670:	89 81       	ldd	r24, Y+1	; 0x01
}
 672:	0f 90       	pop	r0
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	cf 91       	pop	r28
 67e:	df 91       	pop	r29
 680:	08 95       	ret

00000682 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 682:	df 93       	push	r29
 684:	cf 93       	push	r28
 686:	00 d0       	rcall	.+0      	; 0x688 <GPIO_setupPortDirection+0x6>
 688:	00 d0       	rcall	.+0      	; 0x68a <GPIO_setupPortDirection+0x8>
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	89 83       	std	Y+1, r24	; 0x01
 690:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 692:	89 81       	ldd	r24, Y+1	; 0x01
 694:	84 30       	cpi	r24, 0x04	; 4
 696:	90 f5       	brcc	.+100    	; 0x6fc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 698:	89 81       	ldd	r24, Y+1	; 0x01
 69a:	28 2f       	mov	r18, r24
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	3c 83       	std	Y+4, r19	; 0x04
 6a0:	2b 83       	std	Y+3, r18	; 0x03
 6a2:	8b 81       	ldd	r24, Y+3	; 0x03
 6a4:	9c 81       	ldd	r25, Y+4	; 0x04
 6a6:	81 30       	cpi	r24, 0x01	; 1
 6a8:	91 05       	cpc	r25, r1
 6aa:	d1 f0       	breq	.+52     	; 0x6e0 <GPIO_setupPortDirection+0x5e>
 6ac:	2b 81       	ldd	r18, Y+3	; 0x03
 6ae:	3c 81       	ldd	r19, Y+4	; 0x04
 6b0:	22 30       	cpi	r18, 0x02	; 2
 6b2:	31 05       	cpc	r19, r1
 6b4:	2c f4       	brge	.+10     	; 0x6c0 <GPIO_setupPortDirection+0x3e>
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ba:	00 97       	sbiw	r24, 0x00	; 0
 6bc:	61 f0       	breq	.+24     	; 0x6d6 <GPIO_setupPortDirection+0x54>
 6be:	1e c0       	rjmp	.+60     	; 0x6fc <GPIO_setupPortDirection+0x7a>
 6c0:	2b 81       	ldd	r18, Y+3	; 0x03
 6c2:	3c 81       	ldd	r19, Y+4	; 0x04
 6c4:	22 30       	cpi	r18, 0x02	; 2
 6c6:	31 05       	cpc	r19, r1
 6c8:	81 f0       	breq	.+32     	; 0x6ea <GPIO_setupPortDirection+0x68>
 6ca:	8b 81       	ldd	r24, Y+3	; 0x03
 6cc:	9c 81       	ldd	r25, Y+4	; 0x04
 6ce:	83 30       	cpi	r24, 0x03	; 3
 6d0:	91 05       	cpc	r25, r1
 6d2:	81 f0       	breq	.+32     	; 0x6f4 <GPIO_setupPortDirection+0x72>
 6d4:	13 c0       	rjmp	.+38     	; 0x6fc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 6d6:	ea e3       	ldi	r30, 0x3A	; 58
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	8a 81       	ldd	r24, Y+2	; 0x02
 6dc:	80 83       	st	Z, r24
 6de:	0e c0       	rjmp	.+28     	; 0x6fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 6e0:	e7 e3       	ldi	r30, 0x37	; 55
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	8a 81       	ldd	r24, Y+2	; 0x02
 6e6:	80 83       	st	Z, r24
 6e8:	09 c0       	rjmp	.+18     	; 0x6fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 6ea:	e4 e3       	ldi	r30, 0x34	; 52
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	80 83       	st	Z, r24
 6f2:	04 c0       	rjmp	.+8      	; 0x6fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 6f4:	e1 e3       	ldi	r30, 0x31	; 49
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	80 83       	st	Z, r24
			break;
		}
	}
}
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	cf 91       	pop	r28
 706:	df 91       	pop	r29
 708:	08 95       	ret

0000070a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 70a:	df 93       	push	r29
 70c:	cf 93       	push	r28
 70e:	00 d0       	rcall	.+0      	; 0x710 <GPIO_writePort+0x6>
 710:	00 d0       	rcall	.+0      	; 0x712 <GPIO_writePort+0x8>
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
 716:	89 83       	std	Y+1, r24	; 0x01
 718:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
 71a:	89 81       	ldd	r24, Y+1	; 0x01
 71c:	84 30       	cpi	r24, 0x04	; 4
 71e:	90 f5       	brcc	.+100    	; 0x784 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 720:	89 81       	ldd	r24, Y+1	; 0x01
 722:	28 2f       	mov	r18, r24
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	3c 83       	std	Y+4, r19	; 0x04
 728:	2b 83       	std	Y+3, r18	; 0x03
 72a:	8b 81       	ldd	r24, Y+3	; 0x03
 72c:	9c 81       	ldd	r25, Y+4	; 0x04
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	91 05       	cpc	r25, r1
 732:	d1 f0       	breq	.+52     	; 0x768 <GPIO_writePort+0x5e>
 734:	2b 81       	ldd	r18, Y+3	; 0x03
 736:	3c 81       	ldd	r19, Y+4	; 0x04
 738:	22 30       	cpi	r18, 0x02	; 2
 73a:	31 05       	cpc	r19, r1
 73c:	2c f4       	brge	.+10     	; 0x748 <GPIO_writePort+0x3e>
 73e:	8b 81       	ldd	r24, Y+3	; 0x03
 740:	9c 81       	ldd	r25, Y+4	; 0x04
 742:	00 97       	sbiw	r24, 0x00	; 0
 744:	61 f0       	breq	.+24     	; 0x75e <GPIO_writePort+0x54>
 746:	1e c0       	rjmp	.+60     	; 0x784 <GPIO_writePort+0x7a>
 748:	2b 81       	ldd	r18, Y+3	; 0x03
 74a:	3c 81       	ldd	r19, Y+4	; 0x04
 74c:	22 30       	cpi	r18, 0x02	; 2
 74e:	31 05       	cpc	r19, r1
 750:	81 f0       	breq	.+32     	; 0x772 <GPIO_writePort+0x68>
 752:	8b 81       	ldd	r24, Y+3	; 0x03
 754:	9c 81       	ldd	r25, Y+4	; 0x04
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	91 05       	cpc	r25, r1
 75a:	81 f0       	breq	.+32     	; 0x77c <GPIO_writePort+0x72>
 75c:	13 c0       	rjmp	.+38     	; 0x784 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 75e:	eb e3       	ldi	r30, 0x3B	; 59
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	8a 81       	ldd	r24, Y+2	; 0x02
 764:	80 83       	st	Z, r24
 766:	0e c0       	rjmp	.+28     	; 0x784 <GPIO_writePort+0x7a>
			break;

		case PORTB_ID:
			PORTB = value;
 768:	e8 e3       	ldi	r30, 0x38	; 56
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	8a 81       	ldd	r24, Y+2	; 0x02
 76e:	80 83       	st	Z, r24
 770:	09 c0       	rjmp	.+18     	; 0x784 <GPIO_writePort+0x7a>
			break;

		case PORTC_ID:
			PORTC = value;
 772:	e5 e3       	ldi	r30, 0x35	; 53
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	8a 81       	ldd	r24, Y+2	; 0x02
 778:	80 83       	st	Z, r24
 77a:	04 c0       	rjmp	.+8      	; 0x784 <GPIO_writePort+0x7a>
			break;

		case PORTD_ID:
			PORTD = value;
 77c:	e2 e3       	ldi	r30, 0x32	; 50
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	8a 81       	ldd	r24, Y+2	; 0x02
 782:	80 83       	st	Z, r24
			break;
		}
	}
}
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	0f 90       	pop	r0
 78c:	cf 91       	pop	r28
 78e:	df 91       	pop	r29
 790:	08 95       	ret

00000792 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
 792:	df 93       	push	r29
 794:	cf 93       	push	r28
 796:	00 d0       	rcall	.+0      	; 0x798 <GPIO_readPort+0x6>
 798:	00 d0       	rcall	.+0      	; 0x79a <GPIO_readPort+0x8>
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
 79e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOW;
 7a0:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
 7a2:	8a 81       	ldd	r24, Y+2	; 0x02
 7a4:	84 30       	cpi	r24, 0x04	; 4
 7a6:	90 f5       	brcc	.+100    	; 0x80c <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
 7a8:	8a 81       	ldd	r24, Y+2	; 0x02
 7aa:	28 2f       	mov	r18, r24
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	3c 83       	std	Y+4, r19	; 0x04
 7b0:	2b 83       	std	Y+3, r18	; 0x03
 7b2:	8b 81       	ldd	r24, Y+3	; 0x03
 7b4:	9c 81       	ldd	r25, Y+4	; 0x04
 7b6:	81 30       	cpi	r24, 0x01	; 1
 7b8:	91 05       	cpc	r25, r1
 7ba:	d1 f0       	breq	.+52     	; 0x7f0 <GPIO_readPort+0x5e>
 7bc:	2b 81       	ldd	r18, Y+3	; 0x03
 7be:	3c 81       	ldd	r19, Y+4	; 0x04
 7c0:	22 30       	cpi	r18, 0x02	; 2
 7c2:	31 05       	cpc	r19, r1
 7c4:	2c f4       	brge	.+10     	; 0x7d0 <GPIO_readPort+0x3e>
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
 7c8:	9c 81       	ldd	r25, Y+4	; 0x04
 7ca:	00 97       	sbiw	r24, 0x00	; 0
 7cc:	61 f0       	breq	.+24     	; 0x7e6 <GPIO_readPort+0x54>
 7ce:	1e c0       	rjmp	.+60     	; 0x80c <GPIO_readPort+0x7a>
 7d0:	2b 81       	ldd	r18, Y+3	; 0x03
 7d2:	3c 81       	ldd	r19, Y+4	; 0x04
 7d4:	22 30       	cpi	r18, 0x02	; 2
 7d6:	31 05       	cpc	r19, r1
 7d8:	81 f0       	breq	.+32     	; 0x7fa <GPIO_readPort+0x68>
 7da:	8b 81       	ldd	r24, Y+3	; 0x03
 7dc:	9c 81       	ldd	r25, Y+4	; 0x04
 7de:	83 30       	cpi	r24, 0x03	; 3
 7e0:	91 05       	cpc	r25, r1
 7e2:	81 f0       	breq	.+32     	; 0x804 <GPIO_readPort+0x72>
 7e4:	13 c0       	rjmp	.+38     	; 0x80c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 7e6:	e9 e3       	ldi	r30, 0x39	; 57
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	89 83       	std	Y+1, r24	; 0x01
 7ee:	0e c0       	rjmp	.+28     	; 0x80c <GPIO_readPort+0x7a>
			break;

		case PORTB_ID:
			value = PINB;
 7f0:	e6 e3       	ldi	r30, 0x36	; 54
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	89 83       	std	Y+1, r24	; 0x01
 7f8:	09 c0       	rjmp	.+18     	; 0x80c <GPIO_readPort+0x7a>
			break;

		case PORTC_ID:
			value = PINC;
 7fa:	e3 e3       	ldi	r30, 0x33	; 51
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
 800:	89 83       	std	Y+1, r24	; 0x01
 802:	04 c0       	rjmp	.+8      	; 0x80c <GPIO_readPort+0x7a>
			break;

		case PORTD_ID:
			value = PIND;
 804:	e0 e3       	ldi	r30, 0x30	; 48
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	80 81       	ld	r24, Z
 80a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
 80c:	89 81       	ldd	r24, Y+1	; 0x01
}
 80e:	0f 90       	pop	r0
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	cf 91       	pop	r28
 818:	df 91       	pop	r29
 81a:	08 95       	ret

0000081c <GPIO_toggle>:

void GPIO_toggle(uint8 port_num, uint8 pin_num)
{
 81c:	df 93       	push	r29
 81e:	cf 93       	push	r28
 820:	00 d0       	rcall	.+0      	; 0x822 <GPIO_toggle+0x6>
 822:	00 d0       	rcall	.+0      	; 0x824 <GPIO_toggle+0x8>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	89 83       	std	Y+1, r24	; 0x01
 82a:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_num){
 82c:	89 81       	ldd	r24, Y+1	; 0x01
 82e:	28 2f       	mov	r18, r24
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	3c 83       	std	Y+4, r19	; 0x04
 834:	2b 83       	std	Y+3, r18	; 0x03
 836:	8b 81       	ldd	r24, Y+3	; 0x03
 838:	9c 81       	ldd	r25, Y+4	; 0x04
 83a:	81 30       	cpi	r24, 0x01	; 1
 83c:	91 05       	cpc	r25, r1
 83e:	49 f1       	breq	.+82     	; 0x892 <GPIO_toggle+0x76>
 840:	2b 81       	ldd	r18, Y+3	; 0x03
 842:	3c 81       	ldd	r19, Y+4	; 0x04
 844:	22 30       	cpi	r18, 0x02	; 2
 846:	31 05       	cpc	r19, r1
 848:	2c f4       	brge	.+10     	; 0x854 <GPIO_toggle+0x38>
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	9c 81       	ldd	r25, Y+4	; 0x04
 84e:	00 97       	sbiw	r24, 0x00	; 0
 850:	61 f0       	breq	.+24     	; 0x86a <GPIO_toggle+0x4e>
 852:	5a c0       	rjmp	.+180    	; 0x908 <GPIO_toggle+0xec>
 854:	2b 81       	ldd	r18, Y+3	; 0x03
 856:	3c 81       	ldd	r19, Y+4	; 0x04
 858:	22 30       	cpi	r18, 0x02	; 2
 85a:	31 05       	cpc	r19, r1
 85c:	71 f1       	breq	.+92     	; 0x8ba <GPIO_toggle+0x9e>
 85e:	8b 81       	ldd	r24, Y+3	; 0x03
 860:	9c 81       	ldd	r25, Y+4	; 0x04
 862:	83 30       	cpi	r24, 0x03	; 3
 864:	91 05       	cpc	r25, r1
 866:	e9 f1       	breq	.+122    	; 0x8e2 <GPIO_toggle+0xc6>
 868:	4f c0       	rjmp	.+158    	; 0x908 <GPIO_toggle+0xec>
		case PORTA_ID:
	 TOGGLE_BIT(PORTA,pin_num);
 86a:	ab e3       	ldi	r26, 0x3B	; 59
 86c:	b0 e0       	ldi	r27, 0x00	; 0
 86e:	eb e3       	ldi	r30, 0x3B	; 59
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	48 2f       	mov	r20, r24
 876:	8a 81       	ldd	r24, Y+2	; 0x02
 878:	28 2f       	mov	r18, r24
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 2e       	mov	r0, r18
 882:	02 c0       	rjmp	.+4      	; 0x888 <GPIO_toggle+0x6c>
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	0a 94       	dec	r0
 88a:	e2 f7       	brpl	.-8      	; 0x884 <GPIO_toggle+0x68>
 88c:	84 27       	eor	r24, r20
 88e:	8c 93       	st	X, r24
 890:	3b c0       	rjmp	.+118    	; 0x908 <GPIO_toggle+0xec>
		break;
		case PORTB_ID:
		TOGGLE_BIT(PORTB,pin_num);
 892:	a8 e3       	ldi	r26, 0x38	; 56
 894:	b0 e0       	ldi	r27, 0x00	; 0
 896:	e8 e3       	ldi	r30, 0x38	; 56
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	48 2f       	mov	r20, r24
 89e:	8a 81       	ldd	r24, Y+2	; 0x02
 8a0:	28 2f       	mov	r18, r24
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	02 2e       	mov	r0, r18
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <GPIO_toggle+0x94>
 8ac:	88 0f       	add	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	0a 94       	dec	r0
 8b2:	e2 f7       	brpl	.-8      	; 0x8ac <GPIO_toggle+0x90>
 8b4:	84 27       	eor	r24, r20
 8b6:	8c 93       	st	X, r24
 8b8:	27 c0       	rjmp	.+78     	; 0x908 <GPIO_toggle+0xec>
		break;
		case PORTC_ID:
		TOGGLE_BIT(PORTC,pin_num);
 8ba:	a5 e3       	ldi	r26, 0x35	; 53
 8bc:	b0 e0       	ldi	r27, 0x00	; 0
 8be:	e5 e3       	ldi	r30, 0x35	; 53
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	80 81       	ld	r24, Z
 8c4:	48 2f       	mov	r20, r24
 8c6:	8a 81       	ldd	r24, Y+2	; 0x02
 8c8:	28 2f       	mov	r18, r24
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 2e       	mov	r0, r18
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <GPIO_toggle+0xbc>
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	0a 94       	dec	r0
 8da:	e2 f7       	brpl	.-8      	; 0x8d4 <GPIO_toggle+0xb8>
 8dc:	84 27       	eor	r24, r20
 8de:	8c 93       	st	X, r24
 8e0:	13 c0       	rjmp	.+38     	; 0x908 <GPIO_toggle+0xec>
		break;
		case PORTD_ID:
		TOGGLE_BIT(PORTD,pin_num);
 8e2:	a2 e3       	ldi	r26, 0x32	; 50
 8e4:	b0 e0       	ldi	r27, 0x00	; 0
 8e6:	e2 e3       	ldi	r30, 0x32	; 50
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	80 81       	ld	r24, Z
 8ec:	48 2f       	mov	r20, r24
 8ee:	8a 81       	ldd	r24, Y+2	; 0x02
 8f0:	28 2f       	mov	r18, r24
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	02 2e       	mov	r0, r18
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <GPIO_toggle+0xe4>
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	0a 94       	dec	r0
 902:	e2 f7       	brpl	.-8      	; 0x8fc <GPIO_toggle+0xe0>
 904:	84 27       	eor	r24, r20
 906:	8c 93       	st	X, r24
		break;
	}
}
 908:	0f 90       	pop	r0
 90a:	0f 90       	pop	r0
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	cf 91       	pop	r28
 912:	df 91       	pop	r29
 914:	08 95       	ret

00000916 <PushButtonInit>:
 *
 *******************************************************************************/
#include"PUSH_BUTTON.h"


void PushButtonInit(uint8 port_num  ,uint8 pin_num ){
 916:	df 93       	push	r29
 918:	cf 93       	push	r28
 91a:	00 d0       	rcall	.+0      	; 0x91c <PushButtonInit+0x6>
 91c:	cd b7       	in	r28, 0x3d	; 61
 91e:	de b7       	in	r29, 0x3e	; 62
 920:	89 83       	std	Y+1, r24	; 0x01
 922:	6a 83       	std	Y+2, r22	; 0x02

	GPIO_setupPinDirection( port_num,  pin_num, 0);
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	6a 81       	ldd	r22, Y+2	; 0x02
 928:	40 e0       	ldi	r20, 0x00	; 0
 92a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GPIO_setupPinDirection>

}
 92e:	0f 90       	pop	r0
 930:	0f 90       	pop	r0
 932:	cf 91       	pop	r28
 934:	df 91       	pop	r29
 936:	08 95       	ret

00000938 <BUTTON_READ>:

void BUTTON_READ(uint8 port_num, uint8 pin_num, uint8 * value)
{
 938:	df 93       	push	r29
 93a:	cf 93       	push	r28
 93c:	00 d0       	rcall	.+0      	; 0x93e <BUTTON_READ+0x6>
 93e:	00 d0       	rcall	.+0      	; 0x940 <BUTTON_READ+0x8>
 940:	cd b7       	in	r28, 0x3d	; 61
 942:	de b7       	in	r29, 0x3e	; 62
 944:	89 83       	std	Y+1, r24	; 0x01
 946:	6a 83       	std	Y+2, r22	; 0x02
 948:	5c 83       	std	Y+4, r21	; 0x04
 94a:	4b 83       	std	Y+3, r20	; 0x03
	GPIO_readPin(port_num, pin_num );
 94c:	89 81       	ldd	r24, Y+1	; 0x01
 94e:	6a 81       	ldd	r22, Y+2	; 0x02
 950:	0e 94 a6 02 	call	0x54c	; 0x54c <GPIO_readPin>

}
 954:	0f 90       	pop	r0
 956:	0f 90       	pop	r0
 958:	0f 90       	pop	r0
 95a:	0f 90       	pop	r0
 95c:	cf 91       	pop	r28
 95e:	df 91       	pop	r29
 960:	08 95       	ret

00000962 <ledInit>:

/*******************************************************************************
 *                              Functions                                      *
 *******************************************************************************/

void ledInit(uint8 port_num  ,uint8 pin_num ){
 962:	df 93       	push	r29
 964:	cf 93       	push	r28
 966:	00 d0       	rcall	.+0      	; 0x968 <ledInit+0x6>
 968:	cd b7       	in	r28, 0x3d	; 61
 96a:	de b7       	in	r29, 0x3e	; 62
 96c:	89 83       	std	Y+1, r24	; 0x01
 96e:	6a 83       	std	Y+2, r22	; 0x02

	GPIO_setupPinDirection( port_num,  pin_num, 1);
 970:	89 81       	ldd	r24, Y+1	; 0x01
 972:	6a 81       	ldd	r22, Y+2	; 0x02
 974:	41 e0       	ldi	r20, 0x01	; 1
 976:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GPIO_setupPinDirection>
}
 97a:	0f 90       	pop	r0
 97c:	0f 90       	pop	r0
 97e:	cf 91       	pop	r28
 980:	df 91       	pop	r29
 982:	08 95       	ret

00000984 <ledOn>:

void ledOn(uint8  port_num ,uint8 pin_num){
 984:	df 93       	push	r29
 986:	cf 93       	push	r28
 988:	00 d0       	rcall	.+0      	; 0x98a <ledOn+0x6>
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
 98e:	89 83       	std	Y+1, r24	; 0x01
 990:	6a 83       	std	Y+2, r22	; 0x02

	GPIO_writePin(port_num,pin_num, 1);       //Set the given pin in the given port to one(on)
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	6a 81       	ldd	r22, Y+2	; 0x02
 996:	41 e0       	ldi	r20, 0x01	; 1
 998:	0e 94 bb 01 	call	0x376	; 0x376 <GPIO_writePin>
}
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	cf 91       	pop	r28
 9a2:	df 91       	pop	r29
 9a4:	08 95       	ret

000009a6 <ledOff>:

void ledOff(uint8  port_num  ,uint8 pin_num){
 9a6:	df 93       	push	r29
 9a8:	cf 93       	push	r28
 9aa:	00 d0       	rcall	.+0      	; 0x9ac <ledOff+0x6>
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	89 83       	std	Y+1, r24	; 0x01
 9b2:	6a 83       	std	Y+2, r22	; 0x02

	GPIO_writePin( port_num,  pin_num ,0);      //Set the given pin in the given port to zero(off)
 9b4:	89 81       	ldd	r24, Y+1	; 0x01
 9b6:	6a 81       	ldd	r22, Y+2	; 0x02
 9b8:	40 e0       	ldi	r20, 0x00	; 0
 9ba:	0e 94 bb 01 	call	0x376	; 0x376 <GPIO_writePin>
}
 9be:	0f 90       	pop	r0
 9c0:	0f 90       	pop	r0
 9c2:	cf 91       	pop	r28
 9c4:	df 91       	pop	r29
 9c6:	08 95       	ret

000009c8 <ledToggle>:

void ledToggle (uint8 port_num  , uint8 pin_num)
{
 9c8:	df 93       	push	r29
 9ca:	cf 93       	push	r28
 9cc:	00 d0       	rcall	.+0      	; 0x9ce <ledToggle+0x6>
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
 9d2:	89 83       	std	Y+1, r24	; 0x01
 9d4:	6a 83       	std	Y+2, r22	; 0x02
		GPIO_toggle(port_num,pin_num);
 9d6:	89 81       	ldd	r24, Y+1	; 0x01
 9d8:	6a 81       	ldd	r22, Y+2	; 0x02
 9da:	0e 94 0e 04 	call	0x81c	; 0x81c <GPIO_toggle>
}
 9de:	0f 90       	pop	r0
 9e0:	0f 90       	pop	r0
 9e2:	cf 91       	pop	r28
 9e4:	df 91       	pop	r29
 9e6:	08 95       	ret

000009e8 <app_inits>:
 * [Description]   : Function to intilization the moduels of program
 *
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void app_inits(void){
 9e8:	df 93       	push	r29
 9ea:	cf 93       	push	r28
 9ec:	cd b7       	in	r28, 0x3d	; 61
 9ee:	de b7       	in	r29, 0x3e	; 62

	// Initializing Direction and Value of LED DIO PINS
	//car_LEDS
	ledInit(PORTA_ID,PIN0_ID); //green
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	60 e0       	ldi	r22, 0x00	; 0
 9f4:	0e 94 b1 04 	call	0x962	; 0x962 <ledInit>
	ledInit(PORTA_ID,PIN1_ID); //Yellow
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	61 e0       	ldi	r22, 0x01	; 1
 9fc:	0e 94 b1 04 	call	0x962	; 0x962 <ledInit>
	ledInit(PORTA_ID,PIN2_ID); //red
 a00:	80 e0       	ldi	r24, 0x00	; 0
 a02:	62 e0       	ldi	r22, 0x02	; 2
 a04:	0e 94 b1 04 	call	0x962	; 0x962 <ledInit>

    //pedestrian_LEDS
	ledInit(PORTB_ID,PIN0_ID); //green
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	60 e0       	ldi	r22, 0x00	; 0
 a0c:	0e 94 b1 04 	call	0x962	; 0x962 <ledInit>
	ledInit(PORTB_ID,PIN1_ID); //Yellow
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	61 e0       	ldi	r22, 0x01	; 1
 a14:	0e 94 b1 04 	call	0x962	; 0x962 <ledInit>
	ledInit(PORTB_ID,PIN2_ID); //red
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	62 e0       	ldi	r22, 0x02	; 2
 a1c:	0e 94 b1 04 	call	0x962	; 0x962 <ledInit>

	// initializing Interrupt Button Pin
	PushButtonInit(PORTD_ID,PIN2_ID); //INT0
 a20:	83 e0       	ldi	r24, 0x03	; 3
 a22:	62 e0       	ldi	r22, 0x02	; 2
 a24:	0e 94 8b 04 	call	0x916	; 0x916 <PushButtonInit>


	//Initializing INTERRUPT 0
	Exi0Init();
 a28:	0e 94 8d 00 	call	0x11a	; 0x11a <Exi0Init>
   //Enable INTERRUPT 0
	Exi0Enable();
 a2c:	0e 94 b4 00 	call	0x168	; 0x168 <Exi0Enable>

}
 a30:	cf 91       	pop	r28
 a32:	df 91       	pop	r29
 a34:	08 95       	ret

00000a36 <app_start>:
 * [Description]   : Function to be called when normal routine
 *
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void app_start(void){
 a36:	df 93       	push	r29
 a38:	cf 93       	push	r28
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62

	// Green led for cars & Red led for ped. is on for five seconds
	 ledOn(PORTA_ID,PIN0_ID);
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	60 e0       	ldi	r22, 0x00	; 0
 a42:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>
	 ledOn(PORTB_ID,PIN2_ID);
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	62 e0       	ldi	r22, 0x02	; 2
 a4a:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>
	 Timer0_Delay(20);
 a4e:	64 e1       	ldi	r22, 0x14	; 20
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	80 e0       	ldi	r24, 0x00	; 0
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Delay>

     // After 5 second  Green led for cars & Red led for ped. switched OFF
     // And yellow LEDs of both will blinking for five second
     ledOff(PORTA_ID,PIN0_ID);
 a5a:	80 e0       	ldi	r24, 0x00	; 0
 a5c:	60 e0       	ldi	r22, 0x00	; 0
 a5e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
     ledOff(PORTB_ID,PIN2_ID);
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	62 e0       	ldi	r22, 0x02	; 2
 a66:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
     Blinking_yellow();
 a6a:	0e 94 62 05 	call	0xac4	; 0xac4 <Blinking_yellow>
     ledOff(PORTA_ID,PIN1_ID);
 a6e:	80 e0       	ldi	r24, 0x00	; 0
 a70:	61 e0       	ldi	r22, 0x01	; 1
 a72:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
     ledOff(PORTB_ID,PIN1_ID);
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	61 e0       	ldi	r22, 0x01	; 1
 a7a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>

     // After yellow blinking for 5 seconds
     // Red led for cars & green led for ped. is on for five seconds
     // then yellow blinking again

     ledOn(PORTA_ID,PIN2_ID);
 a7e:	80 e0       	ldi	r24, 0x00	; 0
 a80:	62 e0       	ldi	r22, 0x02	; 2
 a82:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>
     ledOn(PORTB_ID,PIN0_ID);
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	60 e0       	ldi	r22, 0x00	; 0
 a8a:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>
     Timer0_Delay(20);
 a8e:	64 e1       	ldi	r22, 0x14	; 20
 a90:	70 e0       	ldi	r23, 0x00	; 0
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Delay>
     ledOff(PORTA_ID,PIN2_ID);
 a9a:	80 e0       	ldi	r24, 0x00	; 0
 a9c:	62 e0       	ldi	r22, 0x02	; 2
 a9e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
     ledOff(PORTB_ID,PIN0_ID);
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	60 e0       	ldi	r22, 0x00	; 0
 aa6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>

     Blinking_yellow();
 aaa:	0e 94 62 05 	call	0xac4	; 0xac4 <Blinking_yellow>

     ledOff(PORTA_ID,PIN1_ID);
 aae:	80 e0       	ldi	r24, 0x00	; 0
 ab0:	61 e0       	ldi	r22, 0x01	; 1
 ab2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
     ledOff(PORTB_ID,PIN1_ID);
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	61 e0       	ldi	r22, 0x01	; 1
 aba:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>


}
 abe:	cf 91       	pop	r28
 ac0:	df 91       	pop	r29
 ac2:	08 95       	ret

00000ac4 <Blinking_yellow>:
 *
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void Blinking_yellow()
{
 ac4:	df 93       	push	r29
 ac6:	cf 93       	push	r28
 ac8:	cd b7       	in	r28, 0x3d	; 61
 aca:	de b7       	in	r29, 0x3e	; 62

	 Yellow_is_blinking = 1;
 acc:	81 e0       	ldi	r24, 0x01	; 1
 ace:	80 93 60 00 	sts	0x0060, r24

	 ledToggle(PORTA_ID,PIN1_ID);
 ad2:	80 e0       	ldi	r24, 0x00	; 0
 ad4:	61 e0       	ldi	r22, 0x01	; 1
 ad6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ledToggle>
	 ledToggle(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	61 e0       	ldi	r22, 0x01	; 1
 ade:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ledToggle>
	 Timer0_Delay(5);
 ae2:	65 e0       	ldi	r22, 0x05	; 5
 ae4:	70 e0       	ldi	r23, 0x00	; 0
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Delay>

	ledToggle(PORTA_ID,PIN1_ID);
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	61 e0       	ldi	r22, 0x01	; 1
 af2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ledToggle>
	ledToggle(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	61 e0       	ldi	r22, 0x01	; 1
 afa:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ledToggle>
	Timer0_Delay(5);
 afe:	65 e0       	ldi	r22, 0x05	; 5
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	80 e0       	ldi	r24, 0x00	; 0
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Delay>

	ledToggle(PORTA_ID,PIN1_ID);
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	61 e0       	ldi	r22, 0x01	; 1
 b0e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ledToggle>
	ledToggle(PORTB_ID,PIN1_ID);   // YELLOW LED FOR PEDESTRIANS
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	61 e0       	ldi	r22, 0x01	; 1
 b16:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ledToggle>
	Timer0_Delay(5);
 b1a:	65 e0       	ldi	r22, 0x05	; 5
 b1c:	70 e0       	ldi	r23, 0x00	; 0
 b1e:	80 e0       	ldi	r24, 0x00	; 0
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Delay>

	ledToggle(PORTA_ID,PIN1_ID);
 b26:	80 e0       	ldi	r24, 0x00	; 0
 b28:	61 e0       	ldi	r22, 0x01	; 1
 b2a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ledToggle>
	ledToggle(PORTB_ID,PIN1_ID);   // YELLOW LED FOR PEDESTRIANS
 b2e:	81 e0       	ldi	r24, 0x01	; 1
 b30:	61 e0       	ldi	r22, 0x01	; 1
 b32:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ledToggle>
	Timer0_Delay(5);
 b36:	65 e0       	ldi	r22, 0x05	; 5
 b38:	70 e0       	ldi	r23, 0x00	; 0
 b3a:	80 e0       	ldi	r24, 0x00	; 0
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Delay>

	ledToggle(PORTA_ID,PIN1_ID);
 b42:	80 e0       	ldi	r24, 0x00	; 0
 b44:	61 e0       	ldi	r22, 0x01	; 1
 b46:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ledToggle>
	ledToggle(PORTB_ID,PIN1_ID); // YELLOW LED FOR PEDESTRIANS
 b4a:	81 e0       	ldi	r24, 0x01	; 1
 b4c:	61 e0       	ldi	r22, 0x01	; 1
 b4e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ledToggle>
	Timer0_Delay(5);
 b52:	65 e0       	ldi	r22, 0x05	; 5
 b54:	70 e0       	ldi	r23, 0x00	; 0
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Delay>

	ledToggle(PORTA_ID,PIN1_ID);
    ledToggle(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
	Timer0_Delay(5);*/

	 Yellow_is_blinking = 0;
 b5e:	10 92 60 00 	sts	0x0060, r1
}
 b62:	cf 91       	pop	r28
 b64:	df 91       	pop	r29
 b66:	08 95       	ret

00000b68 <PED_Mood>:
 *
 * [Args in]       : NONE
 * [Args out]      : NONE
 *******************************************************************************/
void PED_Mood ()
{
 b68:	df 93       	push	r29
 b6a:	cf 93       	push	r28
 b6c:	cd b7       	in	r28, 0x3d	; 61
 b6e:	de b7       	in	r29, 0x3e	; 62

	    /*     SECOND CASE:
		      If BUTTON is pressed when the cars' Green LED is on or the cars' Yellow LED is blinking,
		*/

	else if( BIT_IS_SET(PORTA_ID,PIN0_ID) ||   Yellow_is_blinking ==1){
 b70:	80 91 60 00 	lds	r24, 0x0060
 b74:	81 30       	cpi	r24, 0x01	; 1
 b76:	21 f5       	brne	.+72     	; 0xbc0 <PED_Mood+0x58>
		 // the pedestrian Red LED will be on
				 ledOff(PORTA_ID,PIN0_ID);  // GREEN LED FOR CARS
 b78:	80 e0       	ldi	r24, 0x00	; 0
 b7a:	60 e0       	ldi	r22, 0x00	; 0
 b7c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
				 ledOn(PORTB_ID,PIN2_ID);  // RED LED FOR PEDESTRIANS
 b80:	81 e0       	ldi	r24, 0x01	; 1
 b82:	62 e0       	ldi	r22, 0x02	; 2
 b84:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>

		// then both Yellow LEDs start to blink for five seconds,
			    Blinking_yellow ();
 b88:	0e 94 62 05 	call	0xac4	; 0xac4 <Blinking_yellow>
			    ledOff(PORTA_ID,PIN1_ID);  // YELLOW LED FOR CARS
 b8c:	80 e0       	ldi	r24, 0x00	; 0
 b8e:	61 e0       	ldi	r22, 0x01	; 1
 b90:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
			    ledOff(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
 b94:	81 e0       	ldi	r24, 0x01	; 1
 b96:	61 e0       	ldi	r22, 0x01	; 1
 b98:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
			    ledOff(PORTB_ID,PIN2_ID);  // RED LED FOR PEDESTRIANS
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	62 e0       	ldi	r22, 0x02	; 2
 ba0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
		// then the cars' Red LED and pedestrian Green LEDs are on for five seconds,
				 ledOn(PORTA_ID,PIN2_ID);  // RED LED FOR CARS
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	62 e0       	ldi	r22, 0x02	; 2
 ba8:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>
				 ledOn(PORTB_ID,PIN0_ID);  // GREEN LED FOR PEDESTRIANS
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	60 e0       	ldi	r22, 0x00	; 0
 bb0:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>
				 Timer0_Delay(20);
 bb4:	64 e1       	ldi	r22, 0x14	; 20
 bb6:	70 e0       	ldi	r23, 0x00	; 0
 bb8:	80 e0       	ldi	r24, 0x00	; 0
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Delay>

	// 	 At the end of the two states :
	// 	 the cars' Red LED will be off and both Yellow LEDs start blinking for 5 seconds
	// 	 and the pedestrian's Green LED is still on

	        ledOff(PORTA_ID,PIN2_ID);  // RED LED FOR CARS
 bc0:	80 e0       	ldi	r24, 0x00	; 0
 bc2:	62 e0       	ldi	r22, 0x02	; 2
 bc4:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
			Blinking_yellow ();
 bc8:	0e 94 62 05 	call	0xac4	; 0xac4 <Blinking_yellow>
			ledOff(PORTA_ID,PIN1_ID);  // YELLOW LED FOR CARS
 bcc:	80 e0       	ldi	r24, 0x00	; 0
 bce:	61 e0       	ldi	r22, 0x01	; 1
 bd0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
			ledOff(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
 bd4:	81 e0       	ldi	r24, 0x01	; 1
 bd6:	61 e0       	ldi	r22, 0x01	; 1
 bd8:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>

	//   After 5 seconds the pedestrian Green LED will be off
	//   and both the pedestrian Red LED and the cars' Green LED will be on.
		  ledOff(PORTB_ID,PIN0_ID);  // GREEN LED FOR PEDESTRIANS
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	60 e0       	ldi	r22, 0x00	; 0
 be0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>

		  ledOn(PORTA_ID,PIN0_ID);  // GREEN LED FOR CARS
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	60 e0       	ldi	r22, 0x00	; 0
 be8:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>
		  ledOn(PORTB_ID,PIN2_ID);  // RED LED FOR PEDESTRIANS
 bec:	81 e0       	ldi	r24, 0x01	; 1
 bee:	62 e0       	ldi	r22, 0x02	; 2
 bf0:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>
		  Timer0_Delay(20);
 bf4:	64 e1       	ldi	r22, 0x14	; 20
 bf6:	70 e0       	ldi	r23, 0x00	; 0
 bf8:	80 e0       	ldi	r24, 0x00	; 0
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Delay>
		  ledOff(PORTA_ID,PIN0_ID);  // GREEN LED FOR CARS
 c00:	80 e0       	ldi	r24, 0x00	; 0
 c02:	60 e0       	ldi	r22, 0x00	; 0
 c04:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
		  ledOff(PORTB_ID,PIN2_ID);  // RED LED FOR PEDESTRIANS
 c08:	81 e0       	ldi	r24, 0x01	; 1
 c0a:	62 e0       	ldi	r22, 0x02	; 2
 c0c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>

}
 c10:	cf 91       	pop	r28
 c12:	df 91       	pop	r29
 c14:	08 95       	ret

00000c16 <__vector_1>:

ISR (INT0_vect)
{
 c16:	1f 92       	push	r1
 c18:	0f 92       	push	r0
 c1a:	0f b6       	in	r0, 0x3f	; 63
 c1c:	0f 92       	push	r0
 c1e:	11 24       	eor	r1, r1
 c20:	2f 93       	push	r18
 c22:	3f 93       	push	r19
 c24:	4f 93       	push	r20
 c26:	5f 93       	push	r21
 c28:	6f 93       	push	r22
 c2a:	7f 93       	push	r23
 c2c:	8f 93       	push	r24
 c2e:	9f 93       	push	r25
 c30:	af 93       	push	r26
 c32:	bf 93       	push	r27
 c34:	ef 93       	push	r30
 c36:	ff 93       	push	r31
 c38:	df 93       	push	r29
 c3a:	cf 93       	push	r28
 c3c:	cd b7       	in	r28, 0x3d	; 61
 c3e:	de b7       	in	r29, 0x3e	; 62
	PED_Mood();
 c40:	0e 94 b4 05 	call	0xb68	; 0xb68 <PED_Mood>

}
 c44:	cf 91       	pop	r28
 c46:	df 91       	pop	r29
 c48:	ff 91       	pop	r31
 c4a:	ef 91       	pop	r30
 c4c:	bf 91       	pop	r27
 c4e:	af 91       	pop	r26
 c50:	9f 91       	pop	r25
 c52:	8f 91       	pop	r24
 c54:	7f 91       	pop	r23
 c56:	6f 91       	pop	r22
 c58:	5f 91       	pop	r21
 c5a:	4f 91       	pop	r20
 c5c:	3f 91       	pop	r19
 c5e:	2f 91       	pop	r18
 c60:	0f 90       	pop	r0
 c62:	0f be       	out	0x3f, r0	; 63
 c64:	0f 90       	pop	r0
 c66:	1f 90       	pop	r1
 c68:	18 95       	reti

00000c6a <Testing_Timers>:

#include"TIMER.h"
#include "../../ECUAL/LEDS/LED.h"

void Testing_Timers(void)
{
 c6a:	df 93       	push	r29
 c6c:	cf 93       	push	r28
 c6e:	cd b7       	in	r28, 0x3d	; 61
 c70:	de b7       	in	r29, 0x3e	; 62
	ledInit (PORTA_ID,PIN5_ID);
 c72:	80 e0       	ldi	r24, 0x00	; 0
 c74:	65 e0       	ldi	r22, 0x05	; 5
 c76:	0e 94 b1 04 	call	0x962	; 0x962 <ledInit>
	while (1)
	{
		ledOff(PORTA_ID,PIN5_ID);
 c7a:	80 e0       	ldi	r24, 0x00	; 0
 c7c:	65 e0       	ldi	r22, 0x05	; 5
 c7e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
		Timer0_Delay(20);
 c82:	64 e1       	ldi	r22, 0x14	; 20
 c84:	70 e0       	ldi	r23, 0x00	; 0
 c86:	80 e0       	ldi	r24, 0x00	; 0
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Delay>
		ledOn(PORTA_ID,PIN5_ID);
 c8e:	80 e0       	ldi	r24, 0x00	; 0
 c90:	65 e0       	ldi	r22, 0x05	; 5
 c92:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>
		Timer0_Delay(20);
 c96:	64 e1       	ldi	r22, 0x14	; 20
 c98:	70 e0       	ldi	r23, 0x00	; 0
 c9a:	80 e0       	ldi	r24, 0x00	; 0
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Delay>
 ca2:	eb cf       	rjmp	.-42     	; 0xc7a <Testing_Timers+0x10>

00000ca4 <Test_INT>:
#include "../TIMER/TIMER.h"
#include "INT.h"
#include "../../ECUAL/PUSH_BUTTON/PUSH_BUTTON.h"

void Test_INT()
{
 ca4:	df 93       	push	r29
 ca6:	cf 93       	push	r28
 ca8:	cd b7       	in	r28, 0x3d	; 61
 caa:	de b7       	in	r29, 0x3e	; 62

	ledInit (PORTA_ID,PIN5_ID);
 cac:	80 e0       	ldi	r24, 0x00	; 0
 cae:	65 e0       	ldi	r22, 0x05	; 5
 cb0:	0e 94 b1 04 	call	0x962	; 0x962 <ledInit>
	PushButtonInit(PORTD_ID, PIN2_ID);
 cb4:	83 e0       	ldi	r24, 0x03	; 3
 cb6:	62 e0       	ldi	r22, 0x02	; 2
 cb8:	0e 94 8b 04 	call	0x916	; 0x916 <PushButtonInit>
	Exi0Init();
 cbc:	0e 94 8d 00 	call	0x11a	; 0x11a <Exi0Init>
    Exi0Enable();
 cc0:	0e 94 b4 00 	call	0x168	; 0x168 <Exi0Enable>
    ledOn(PORTA_ID,PIN5_ID);
 cc4:	80 e0       	ldi	r24, 0x00	; 0
 cc6:	65 e0       	ldi	r22, 0x05	; 5
 cc8:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>

}
 ccc:	cf 91       	pop	r28
 cce:	df 91       	pop	r29
 cd0:	08 95       	ret

00000cd2 <Testing_Push_Button_and_LEDS>:
//Here we make a test for LEDS & Push button
#include "PUSH_BUTTON.h"
#include "../LEDS/LED.h"

 void Testing_Push_Button_and_LEDS ()
 {
 cd2:	df 93       	push	r29
 cd4:	cf 93       	push	r28
 cd6:	0f 92       	push	r0
 cd8:	cd b7       	in	r28, 0x3d	; 61
 cda:	de b7       	in	r29, 0x3e	; 62
	  // TESTING Buttons DRIVER ////
	 ledInit (PORTA_ID,PIN5_ID);
 cdc:	80 e0       	ldi	r24, 0x00	; 0
 cde:	65 e0       	ldi	r22, 0x05	; 5
 ce0:	0e 94 b1 04 	call	0x962	; 0x962 <ledInit>
	 PushButtonInit(PORTD_ID, PIN2_ID);
 ce4:	83 e0       	ldi	r24, 0x03	; 3
 ce6:	62 e0       	ldi	r22, 0x02	; 2
 ce8:	0e 94 8b 04 	call	0x916	; 0x916 <PushButtonInit>

	  while (1)
	  {
		  uint8_t button_state ;
		  BUTTON_READ(PORTD_ID, PIN2_ID, &button_state );
 cec:	83 e0       	ldi	r24, 0x03	; 3
 cee:	62 e0       	ldi	r22, 0x02	; 2
 cf0:	9e 01       	movw	r18, r28
 cf2:	2f 5f       	subi	r18, 0xFF	; 255
 cf4:	3f 4f       	sbci	r19, 0xFF	; 255
 cf6:	a9 01       	movw	r20, r18
 cf8:	0e 94 9c 04 	call	0x938	; 0x938 <BUTTON_READ>

		  if (button_state == 1)
 cfc:	89 81       	ldd	r24, Y+1	; 0x01
 cfe:	81 30       	cpi	r24, 0x01	; 1
 d00:	29 f4       	brne	.+10     	; 0xd0c <Testing_Push_Button_and_LEDS+0x3a>
		  {
			  ledOn(PORTA_ID,PIN5_ID);
 d02:	80 e0       	ldi	r24, 0x00	; 0
 d04:	65 e0       	ldi	r22, 0x05	; 5
 d06:	0e 94 c2 04 	call	0x984	; 0x984 <ledOn>
 d0a:	f0 cf       	rjmp	.-32     	; 0xcec <Testing_Push_Button_and_LEDS+0x1a>
		  }
		  else if (button_state == 0)
 d0c:	89 81       	ldd	r24, Y+1	; 0x01
 d0e:	88 23       	and	r24, r24
 d10:	69 f7       	brne	.-38     	; 0xcec <Testing_Push_Button_and_LEDS+0x1a>
		  {
			  ledOff (PORTA_ID,PIN5_ID);
 d12:	80 e0       	ldi	r24, 0x00	; 0
 d14:	65 e0       	ldi	r22, 0x05	; 5
 d16:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <ledOff>
 d1a:	e8 cf       	rjmp	.-48     	; 0xcec <Testing_Push_Button_and_LEDS+0x1a>

00000d1c <main>:
#include "APP/APP.h"
#include"MCAL/TIMER/Test_TIMER.h"
#include"MCAL/INT/Test_INT.h"
#include"ECUAL/PUSH_BUTTON/Test_PUSH_BUTTON.h"

int main(void){
 d1c:	df 93       	push	r29
 d1e:	cf 93       	push	r28
 d20:	cd b7       	in	r28, 0x3d	; 61
 d22:	de b7       	in	r29, 0x3e	; 62

	 while(1){
	 	app_start();
	 }*/

	Testing_Timers();
 d24:	0e 94 35 06 	call	0xc6a	; 0xc6a <Testing_Timers>
 d28:	80 e0       	ldi	r24, 0x00	; 0
 d2a:	90 e0       	ldi	r25, 0x00	; 0
    //Test_INT();
	//Testing_Push_Button_and_LEDS();
}
 d2c:	cf 91       	pop	r28
 d2e:	df 91       	pop	r29
 d30:	08 95       	ret

00000d32 <_exit>:
 d32:	f8 94       	cli

00000d34 <__stop_program>:
 d34:	ff cf       	rjmp	.-2      	; 0xd34 <__stop_program>
